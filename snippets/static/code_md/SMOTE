	# -*- coding: utf-8 -*-
	import random
	from sklearn.neighbors import NearestNeighbors
	import numpy as np

	'''
	    SMOTE：合成少数类过采样技术．它是基于随机过采样算法的一种改进方案
	    基本思想：对少数类样本进行分析并根据少数类样本人工合成新样本添加到数据集中
	'''
	class Smote:
	    def __init__(self,samples, N=10, k=5):
	        # 根据样本不平衡比例设置一个采样比例以确定采样倍率N，对于每一个少数类样本x，
	        # 从其k近邻中随机选择若干个样本，假设选择的近邻为xn
	        self.n_samples,self.n_attrs = samples.shape
	        self.N = N  # N是采样倍率
	        self.k = k
	        self.samples = samples
	        self.newindex = 0

	    def over_sampling(self):
	        N = int(self.N/100)
	        # print(N)
	        self.synthetic = np.zeros((self.n_samples * N, self.n_attrs))
	        # 对于少数类中每一个样本x，以欧氏距离为标准计算它到少数类样本集中所有样本的距离，得到其k近邻
	        neighbors = NearestNeighbors(n_neighbors=self.k).fit(self.samples)
	        # 对于每一个随机选出的近邻xn，分别与原样本按照公式构建新的样本
	        for i in range(len(self.samples)):
	            nnarray = neighbors.kneighbors(self.samples[i].reshape(1,-1),return_distance=False)[0]
	            self._populate(N,i,nnarray)
	        return self.synthetic

	    # 每个少数类样本，从k个最近邻中选择N，生成N个合成样本
	    # 对于每一个随机选出的近邻xn，分别与原样本按照公式构建新的样本
	    def _populate(self,N,i,nnarray):
	        for j in range(N):
	            nn = random.randint(0,self.k-1)
	            dif = self.samples[nnarray[nn]] - self.samples[i]
	            gap = random.random()
	            self.synthetic[self.newindex] = self.samples[i] + gap * dif
	            self.newindex += 1

	# 读取除表头外的所有数据
	def loadDataSet(filename):
	    my_list = []
	    # 打开数据集
	    fr = open(filename)
	    # 去掉第一行
	    next(fr)
	    # 遍历每一行
	    for line in fr.readlines():
	        # 删除空白符之后进行切分
	        lineArr = line.strip().split(',')
	        numbers = [float(x) for x in lineArr]
	        # 将数据加入列表
	        my_list.append(numbers)
	        # 返回数据矩阵
	        my_array = np.array(my_list)
	    return my_array

	filename = 'iris.csv'
	b = loadDataSet(filename)
	s = Smote(b,N=100,k=3)